//
// This is main file containing code implementing the Express server and functionality for the Express echo bot.
//
'use strict';
const express = require('express');
const bodyParser = require('body-parser');
const request = require('request');
const path = require('path');
const translate = require('node-google-translate-skidz');
// const translatei = require('translation-google');
var messengerButton = "<html><head><title>Facebook Messenger Bot</title></head><body><h1>Facebook Messenger Bot</h1>This is a bot based on Messenger Platform QuickStart. For more details, see their <a href=\"https://developers.facebook.com/docs/messenger-platform/guides/quick-start\">docs</a>.<script src=\"https://button.glitch.me/button.js\" data-style=\"glitch\"></script><div class=\"glitchButton\" style=\"position:fixed;top:20px;right:20px;\"></div></body></html>";

// The rest of the code implements the routes for our Express server.
let app = express();

app.use(bodyParser.json());
app.use(bodyParser.urlencoded({
  extended: true
}));

// Webhook validation
app.get('/webhook', function(req, res) {
  if (req.query['hub.mode'] === 'subscribe' &&
      req.query['hub.verify_token'] === process.env.VERIFY_TOKEN) {
    console.log("Validating webhook");
    res.status(200).send(req.query['hub.challenge']);
  } else {
    console.error("Failed validation. Make sure the validation tokens match.");
    res.sendStatus(403);          
  }
});

// Display the web page
app.get('/', function(req, res) {
  res.writeHead(200, {'Content-Type': 'text/html'});
  res.write(messengerButton);
  res.end();
});

// Message processing
app.post('/webhook', function (req, res) {
  console.log(req.body);
  var data = req.body;

  // Make sure this is a page subscription
  if (data.object === 'page') {
    
    // Iterate over each entry - there may be multiple if batched
    data.entry.forEach(function(entry) {
      var pageID = entry.id;
      var timeOfEvent = entry.time;

      // Iterate over each messaging event
      entry.messaging.forEach(function(event) {
        if (event.message) {
          receivedMessage(event);
        } else if (event.postback) {
          receivedPostback(event); 
        } else {
          console.log("Webhook received unknown event: ", event);
        }
      });
    });

    // Assume all went well.
    //
    // You must send back a 200, within 20 seconds, to let us know
    // you've successfully received the callback. Otherwise, the request
    // will time out and we will keep trying to resend.
    res.sendStatus(200);
  }
});

// Incoming events handling
function receivedMessage(event) {
  var senderID = event.sender.id;
  var recipientID = event.recipient.id;
  var timeOfMessage = event.timestamp;
  var message = event.message;

  console.log("Received message for user %d and page %d at %d with message:", 
    senderID, recipientID, timeOfMessage);
  console.log(JSON.stringify(message));

  var messageId = message.mid;

  var messageText = message.text;
  var messageAttachments = message.attachments;
  if (messageText) {
    // If we receive a text message, check to see if it matches a keyword
    // and send back the template example. Otherwise, just echo the text we received.
    switch (messageText) {
      case 'generic':
        sendGenericMessage(senderID);
        break;
        case 'sendplay':
//sendplay(senderID);
        sendvideo(senderID);
        break;
case 'pomi': case 'promi':case 'Promi': case 'Pomi': 
sendphoto(senderID);
break;
        case '':
         broadcastButton();
         console.log('switch case bradcast_button');
         break;
      ///////////////////////////////////////
      // Answer message with translate language
      /////////////////////////////////////////
      case(messageText):
      typing(senderID);
      sendTranslation(messageText, 'bn', senderID);
      sendTranslation(messageText, 'en', senderID);
      break;
        
      default:
        sendTextMessage(senderID, "ржмржЯрзЗрж░ ржЖржкржЧрзНрж░рзЗржбрзЗрж╢ржи ржХрж╛ржЬ ржЪрж▓ржЫрзЗ рждрж╛ржЗ ржЖржкржирж╛ржжрзЗрж░ ржХрж╛ржЫ ржерзЗржХрзЗ ржХрж┐ржЫрзБ рж╕ржорзЯ ржЪрзЗрзЯрзЗ ржирж┐ржЪрзНржЫрж┐ ,,,,ржХрж┐ржЫрзБржХрзНрж╖ржгрзЗрж░ ржоржзрзНржпрзЗ ржмржЯ ржЖржЧрзЗрж░ ржоржд рж╣рзЯрзЗ ржпрж╛ржмрзЗ ред рждрждржХрзНрж╖ржи ржкрж░рзНржпржирзНржд ржПржЦрж╛ржирзЗ ржорзЗрж╕рзЗржЬ ржХрж░рзЗ ржЕржирзБржмрж╛ржж ржХрж░рждрзЗ ржкрж╛рж░рзЗржи http://m.me/iamsaifulbro ред ржзржирзНржпржмрж╛ржж");
    }

  } else if (messageAttachments) {
    sendTextMessage(senderID, "ржзржирзНржпржмрж╛ржж ржЖржорж╛ржХрзЗ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рж╛рж░ ржЬржирзНржпред ржжрзЯрж╛ ржХрж░рзЗ ржЖржорж╛ржХрзЗ ржмрж╛ржВрж▓рж╛ ржмрж╛ ржЗржВрж▓рж┐рж╢рзЗ ржП message ржХрж░рзБржи ржпрзЗржи ржЖржкржирж╛ржХрзЗ ржЕржирзБржмрж╛ржж ржХрж░рзЗ ржкрж╛ржарж╛рждрзЗ ржкрж╛рж░рж┐ред");
  }
}

function receivedPostback(event) {
  var senderID = event.sender.id;
  var recipientID = event.recipient.id;
  var timeOfPostback = event.timestamp;

  // The 'payload' param is a developer-defined field which is set in a postback 
  // button for Structured Messages. 
  var payload = event.postback.payload;

  console.log("Received postback for user %d and page %d with payload '%s' " + 
    "at %d", senderID, recipientID, payload, timeOfPostback);

  // When a postback is called, we'll send a message back to the sender to 
  // let them know it was successful
  //sendTextMessage(senderID, "Postback called");
  switch (payload){
case'WELCOME_MESSAGE':
sendTextMessage(senderID,"WELCOME to Bd translator bot. ржЖржорж┐ ржПржХржЯрж┐ ржЕржирзБржмрж╛ржжржХ ржмржЯ ржЖржорж╛рж░ рж╕рж╛рж╣рж╛ржпрзНржпрзЗ ржЖржкржирж┐ ржмрж╛ржВрж▓рж╛ ржнрж╛рж╖рж╛ржХрзЗ ржЗржВрж▓рж┐рж╢рзЗ ржПржмржВ ржЗржВрж▓рж┐рж╢ржХрзЗ ржмрж╛ржВрж▓рж╛рзЯ ржЕржирзБржмрж╛ржж ржХрж░рждрзЗ ржкрж╛рж░ржмрзЗржи рж╢рзБржзрзБ ржЖржорж╛ржХрзЗ  Message ржХрж░рзЗржЗред ");
    //  sendphoto(senderID);
break;
     case'about':
    typing(senderID ); 
  
      sendTextMessage(senderID,"ржЖржорж╛рж░ рж╕ржорзНржкрж░рзНржХрзЗ ржЖржорж┐ ржЖрж░ ржХрж┐ ржмрж▓ржмЁЯШйЁЯШйред  ржмржЯржЯрж┐ ржнрж╛рж▓ рж▓рж╛ржЧрж▓рзЗ ржжрзЯрж╛ржХрж░рзЗ ржкрзЗржЗржЬ ржПрж░ ржоржзрзНржпрзЗ ржЧрж┐рзЯрзЗ рж░рзЗржЯрж┐ржВ ржжрж┐рзЯрзЗржиЁЯЖУтЬЕ ржЖрж░ ржЕржмрж╢рзНржпржЗ ржЖржорж┐ ржпрзЗржнрж╛ржмрзЗ ржЖржкржирж╛ржжрзЗрж░ ржЙржкржХрж╛рж░ ржХрж░ржЫрж┐ ржЖржкржирж╛рж░рж╛ржУ рж╢рзЗрзЯрж╛рж░ ржХрж░рзЗ ржЕржирзНржпржжрзЗрж░ ржЙржкржХрж╛рж░ ржХрж░рзБржиред ЁЯСЙЁЯСЙЁЯСЙрж╕ржмрж╛ржЗржХрзЗ ржЖржирзНрждрж░рж┐ржХ ржзржирзНржпржмрж╛ржж тЭдтЭд");
      break;
      case 'admin':
            typing(senderID );
    sendGenericMessage(senderID);
      sendTextMessage(senderID,"ржПржХрзБрж╢рзЗ ржлрзЗржмрзНрж░рзБрзЯрж╛рж░рзА ржЙржкрж▓ржХрзНрж╖рзЗ ржЖржорж╛ржжрзЗрж░ ржирждрзБржи ржмржЯ Noticebd24 ржЪрж▓рзЗ ржПрж╕рзЗржЫрзЗ ред ржПржЗ ржмржЯрзЗрж░ рж╕рж╛рж╣рж╛ржпрзНржпрзЗ ржЖржкржирж┐ ржЦрзБржм рж╕рж╣ржЬрзЗржЗ ржирждрзБржи ржирждрзБржи ржирзЛржЯрж┐рж╢ржЧрзБрж▓рзЛ ржкрзЗрзЯрзЗ ржпрж╛ржмрзЗржиред   ");
  // sendVideo(senderID);
 //   opinion (senderID); 
      break;
      case 'user_manual':
      typing(senderID );
      sendTextMessage(senderID,"ржзржирзНржпржмрж╛ржж ржЖржкржирж╛ржХрзЗ ржЖржорж╛рзЯ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рж╛рж░ ржЬржирзНржпред рж╕ржмрж╛рж░ ржоржд ржЖржорж╛рж░ ржУ ржЕржирзБржмрж╛ржж ржХрж░рж╛рж░ рж╕ржорзЯ ржХрж┐ржЫрзБ ржнрзБрж▓ рж╣рзЯрзЗ ржерж╛ржХрзЗ рж╕рзЗржЗ ржнрзБрж▓ ржЧрзБрж▓рзЛ ржЖржкржирж┐ ржирж┐ржЬ ржжрж╛рзЯрж┐рждрзНржмрзЗ рж╕ржВрж╢рзЛржзржи ржХрж░рзЗ ржирж┐ржмрзЗржиред/////ЁЯСНЁЯСНржЖржорж╛ржжрзЗрж░ ржмржЯ ржПрж░ ржкрзНрж░ржзрж╛ржи рж╕рзБржмрж┐ржзрж╛ ржЧрзБрж▓рзЛ рж╣рж▓ржГ- ЁЯСЙЁЯСЙЁЯСЙрзз)ржмрж╛ржВрж▓рж╛ ржнрж╛рж╖рж╛ржХрзЗ ржЗржВрж░рзЗржЬрж┐рждрзЗ ржПржмржВ ржЗржВрж░рзЗржЬрж┐ ржХрзЗ ржмрж╛ржВрж▓рж╛рзЯ ржЕржирзБржмрж╛ржж ржХрж░рждрзЗ ржкрж╛рж░ржмрзЗржиред ЁЯСЙЁЯСЙЁЯСЙрзи) ржмрж╛ржВрж▓рж╛ ржЗржВрж░рзЗржЬрж┐ ржЫрж╛рзЬрж╛ржУ ржЕржирзНржпрж╛ржирзНржп рж╕ржХрж▓ ржнрж╛рж╖рж╛ржХрзЗ ржмрж╛ржВрж▓рж╛ ржЗржВрж░рзЗржЬрж┐ ржжрзБржЗ ржнрж╛рж╖рж╛рждрзЗржЗ ржЕржирзБржмрж╛ржж ржХрж░рждрзЗ ржкрж╛рж░ржмрзЗржиредЁЯСЙЁЯСЙЁЯСЙрзй)ржЕржЯрзЛржорзЗржЯрж┐ржХ ржЖржкржирж╛рж░ ржХрзЛржирзЛ ржнрзБрж▓ рж╕рзНржкрзЗрж▓ ржХрж╛рж░рзЗржХрзНржЯ ржХрж░рж╛рж░ ржХрзНрж╖ржорждрж╛ рж░рж╛ржЦрзЗредржПржмржВ рж╕рж╛ржерзЗ рж╕ржарж┐ржХ рж╕рзНржкрзЗрж▓ ржЯрж┐ ржЖржкржирж╛ржХрзЗ ржЬрж╛ржирж┐рзЯрзЗ ржжрж┐ржмрзЗредЁЯСЙЁЯСЙЁЯСЙрзк)ржмрж╛ржВрж▓рж╛ ржЕржнрзНрж░ ржнрж╛рж╖рж╛ржХрзЗржУ ржмрзБржЭрждрзЗ ржкрж╛рж░рзЗредржЕрж░рзНржерж╛рзО,  ржЖржкржирж┐ ржпржжрж┐ ржПрж░ржХржо (amar ekTi kolom ache)рж▓рзЗржЦрзЗ рж╕рзЗржирзНржб ржХрж░рзЗржи рждрж╛рж╣рж▓рзЗржУ ржЕржирзБржмрж╛ржж ржХрж░рж╛рждрзЗ ржкрж╛рж░ржмрзЗредЁЯСЙЁЯСЙЁЯСЙЁЯТЧрж╕рж░рзНржмрж╢рзЗрж╖ ржХржерж╛ рж╣рж▓ ржмржЯ ржЯрж┐ ржЖржкржирж┐ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рж▓рзЗржЗ ржмрзБржЭрждрзЗ ржкрж╛рж░ржмрзЗржиЁЯТЧЁЯСИЁЯСИЁЯСИ ржзржирзНржпржмрж╛ржж ");
        sendTextMessage(senderID,"ржЖржкржирж┐ рж╣рзЯржд ржПржХржЯрзБ ржмрж┐рж░ржХрзНржд ржмрзЛржз ржХрж░рзЗржи ржЖржорж╛ржжрзЗрж░ ржмржЯржЯрж┐ ржХрзЗржи ржЖржкржирж╛рж░ ржжрзЗрзЯрж╛ ржорзНржпрж╛рж╕рзЗржЬржЯрж┐ ржХрзЗржи ржЖржкржирж╛ржХрзЗ ржЖржмрж╛рж░ ржлрж┐рж░рж┐рзЯрзЗ ржжрзЗрзЯредЁЯСЙЁЯСЙрждржмрзЗ ржЬрзЗржирзЗ ржирж┐ржи ржПрж░ ржЙржкржХрж╛рж░рзА ржжрж┐ржХржЧрзБрж▓рзЛ ЁЯСЙЁЯСЙЁЯСЙрзз)ржЖржкржирж┐ ржпржЦржи ржХрзЛржирзЛ ржнрзБрж▓ рж╕рзНржкрзЗрж▓ рж▓рж┐ржЦрзЗ ржЯрзНрж░рж╛ржирзНрж╕рж▓рзЗржЯ ржХрж░рждрзЗ ржжрзЗржи рждржЦржи ржЖржорж╛ржжрзЗрж░ ржмржЯржЯрж┐ рж╕рзЗржЯрж┐ржХрзЗ рж╢рзБржжрзНржз ржХрж░рзЗ ржжрзЗрзЯред ржЖрж░ ржпржжрж┐ ржЖржкржирж┐ рж╢рзБржжрзНржз ржЗ рж▓рзЗржЦрзЗржи рждржмрзЗ ржЖржкржирж╛рж░ржЯрж╛ржЗ ржЖржкржирж┐ ржлрж┐рж░рзЗ ржкрж╛ржмрзЗржиредЁЯСИЁЯСИЁЯСИ рждрж╛ржЗ ржмрж▓ржЫрж┐ ржПржЦрж╛ржирзЗ ржмрж┐рж░ржХрзНржд ржмрзЛржз ржХрж░рж╛рж░ ржХрж┐ржЫрзБ ржирзЗржЗ рж╕ржмржЯрж╛ржЗ ржЖржкржирж╛ржжрзЗрж░ рж╕рзБржмрж┐ржзрж╛рж░рзНржерзЗред ржзржирзНржпржмрж╛ржж тЭдтЭдЁЯСНЁЯСН");
      break;
      case 'ACT::448e09d3329f9434fd6154ab10ebe17c':
      typing(senderID)
      sendTextMessage(senderID, "ржпржЦржи ржмрж┐ржбрж┐ ржЕржирзБржмрж╛ржжржХ ржмржирзНржз ржерж╛ржХрзЗ, рждржЦржи ржПржЗ ржмржЯрзЗ ржорзЗрж╕рзЗржЬ ржХрж░рзЗ ржЕржирзБржмрж╛ржж ржХрж░рзБржи , http://m.me/iamsaifulbro")
                 }
}

//////////////////////////
// Sending helpers
//////////////////////////
function sendTextMessage(recipientId, messageText) {
  var messageData = {
    recipient: {
      id: recipientId
    },
    message: {
      text: messageText
    }
  };

  callSendAPI(messageData);
}
function sendTranslation(text, target, senderID){
   translate({
  text: text,
  source:'auto',
  target: target
}, function (result){
  var translateRes = result.translation;
  sendTextMessage(senderID, translateRes)
})
}
//video 
function sendVideo(recipientId){
const get_random_Video = ((ar) => ( ar[ Math.floor( Math.random() * ar.length ) ] ))
var Video1 = "https://dl.dropbox.com/s/k7lr2mo9v9eynkr/videocompress-067-720_30_1.42_Jul292019.mp4?dl=0";

const Video = [Video1]

{
 var messageData = {   
   recipient: {
        id: recipientId
    },
    message: {
        attachment: {
            type: "video",
            payload: {
                url: get_random_Video( Video )
            }
        }
    }
}
}
callSendAPI(messageData);}

function sendvideo(recipientId){
const get_random_Video = ((ar) => ( ar[ Math.floor( Math.random() * ar.length ) ] ))
var Video1 = "https://cdn.glitch.com/fc2434f0-2262-4165-aee5-2e6055bf465a%2FBd-translator%20user%20manuel%20.mp4?v=1564565742566";

const Video = [Video1]

{
 var messageData = {   
   recipient: {
        id: recipientId
    },
    message: {
        attachment: {
            type: "video",
            payload: {
                url: get_random_Video( Video )
            }
        }
    }
}
}
callSendAPI(messageData);}

//media

function sendplay(recipientId) {
var messageData = {
recipient: {
id: recipientId
},
"message":{
    "attachment": {
      "type": "template",
      "payload": {
         "template_type": "media",
         "elements": [
            {
               "media_type": "video",
               "url": "https://m.facebook.com/story.php?story_fbid=2420395671529637&id=100006776836878"
            }
         ]
      }
    }    
  }
};
callSendAPI(messageData);
}


function sendGenericMessage(recipientId) {
  var messageData = {
    recipient: {
      id: recipientId
    },
    message: {
      attachment: {
        type: "template",
        payload: {
          template_type: "generic",
          elements: [{
            title: "ржПржХрзБрж╢рзЗ ржлрзЗржмрзНрж░рзБрзЯрж╛рж░рж┐ ржЙржкрж▓ржХрзНрж╖ ржЖржорж╛ржжрзЗрж░ ржирждрзБржи ржмржЯ Noticebd24.com ржП ржорзЗрж╕рзЗржЬ ржХрж░рзБржи ржПржЦржиржЗ",
            subtitle: "Noticebd24 ржмржЯрзЗ ржкрж╛ржЪрзНржЫрзЗржи ржирждрзБржи ржирждрзБржи рж╕ржм ржПржбрзБржХрзЗрж╢ржирж╛рж▓,  ржЪрж╛ржХрж░рж┐рж░, рж╕рж╛ржкрзНрждрж╛рж╣рж┐ржХ ржЪрж╛ржХрж░рж┐рж░ ржкрждрзНрж░рж┐ржХрж╛ ржПржмржВ ржмрж┐ржнрж┐ржирзНржи ржмржЗ ржбрж╛ржЙржирж▓рзЛржб рж╕рж╣ ржмрж┐ржнрж┐ржирзНржи ржЕржлрж╛рж░рзЗрж░ ржирзЛржЯрж┐рж╢",
            item_url: "https://www.facebook.com/noticebd24",               
            image_url: " https://cdn.glitch.com/d3e2a241-36ab-414f-9781-4e47668ac65e%2Fnoticebd24_logo.png?v=1582266849413",
            buttons: [{
              type: "web_url",
               url: "https://www.facebook.com/noticebd24",
              title:"Visit PAGE"
            }, {
              type: "web_url",
              title: "Send Message",
              url: "http://m.me/noticebd24",
            }],
          } /*,{ "title":"Welcome! To Bd-Translator Bot",
           "image_url":"https://cdn.glitch.com/d3e2a241-36ab-414f-9781-4e47668ac65e%2FIMG_20190310_170032.jpg?1552215688741", 
            "subtitle":"ржЖржкржирж╛рж░ ржПржХржЯрж┐ рж╢рзЗрзЯрж╛рж░ ржЕржирзНржпрзЗрж░ рж╣рзЯржд ржЕржирзЗржХ ржмрзЬ ржЙржкржХрж╛рж░ рж╣рждрзЗ ржкрж╛рж░рзЗ.", 
        "default_action": { 
          "type": "web_url", 
           "url": "https://www.facebook.com/bd.translate",
   "webview_height_ratio": "tall", }, 
    "buttons":[ { 
      "type":"web_url", 
       "url":"https://www.facebook.com/bd.translate", "title":"View Page" },
   { "type":"postback", 
   "title":"About me", 
    "payload":"about" } ] 
            }, {
            title: "Please Everyone Gives RatingтШЕ in our Bot",
            subtitle: "рж╕ржмрж╛рж░ ржкрзНрж░рждрж┐ ржПржХржЯрж╛ ржЕржирзБрж░рзЛржз рж░ржЗрж▓рзЛ ржжрзЯрж╛ржХрж░рзЗ ржкрзЗржЗржЬрзЗрж░ ржоржзрзНржпрзЗ ржЧрж┐рзЯрзЗ ржЖржкржирж╛рж░ ржорждрж╛ржоржд ржжрж┐ржиред",
            item_url: "http://www.facebook.com/bd.translate",               
            image_url: "https://cdn.glitch.com/d3e2a241-36ab-414f-9781-4e47668ac65e%2FIMG_20190223_174803.jpg?1550922548981",
            buttons: [{
              type: "web_url",
              url: "http://www.facebook.com/bd.translate/",
              title: "Visit page"
            }, {
              type: "postback",
              title: "About Me",
              payload: "about",
            }]
          }*/ ]
        }
      }
    }
  };  

  callSendAPI(messageData);
}

function callSendAPI(messageData) {
  request({
    uri: 'https://graph.facebook.com/v2.6/me/messages',
    qs: { access_token: process.env.PAGE_ACCESS_TOKEN },
    method: 'POST',
    json: messageData

  }, function (error, response, body) {
    if (!error && response.statusCode == 200) {
      var recipientId = body.recipient_id;
      var messageId = body.message_id;

      console.log("Successfully sent generic message with id %s to recipient %s", 
        messageId, recipientId);
    } else {
      console.error("Unable to send message.");
      console.error(response);
      console.error(error);
    }
  });  
}

// Set Express to listen out for HTTP requests
var server = app.listen(process.env.PORT || 3000, function () {
  console.log("Listening on port %s", server.address().port);
});

function sendphoto(recipientId){

const get_random_photo = 
((ar) => ( ar[ Math.floor( Math.random() * ar.length ) ] ))

var photo1 = "https://cdn.glitch.com/d3e2a241-36ab-414f-9781-4e47668ac65e%2Freceived_2894749413920807.jpeg?v=1583173648043";


const photo = [photo1]


{

 var messageData = {  

   recipient: {

        id: recipientId

    },

    message: {

        attachment: {

            type: "image",

            payload: {

                url: get_random_photo( photo )

            }

        }

    }

}

}

callSendAPI(messageData);
}

function opinion(recipientId) {
var messageData = {
recipient: {
id: recipientId
},
message:{ 
attachment:{ 
type:"template", 
payload:{
 template_type:"button",
 text:"ржЖржорж░рж╛ ржирждрзБржи ржПржХржЯрж┐ ржмржЯ ржмрж╛ржирж╛рждрзЗ ржЪрж╛ржЪрзНржЫрж┐ рж╕рзЗ ржЬржирзНржп ржЖржкржирж╛ржжрзЗрж░ ржорждрж╛ржоржд ржЬрж╛ржирж╛рждрзЗ ржирж┐ржЪрзЗрж░ ржорждрж╛ржоржд ржжрж┐ржи ржмрж╛ржЯржирзЗ  ржХрзНрж▓рж┐ржХ ржХрж░рзЗ ржЖржкржирж╛рж░ ржорждрж╛ржоржд ржЖржорж╛ржжрзЗрж░ ржХрж╛ржЫрзЗ ржкрзМржБржЫрзЗ ржжрж┐рждрзЗ ржкрж╛рж░рзЗржиред  ржЖржкржирж┐ ржпрзЗ ржзрж░ржирзЗрж░ ржмржЯ ржкрзЗрждрзЗ ржЪрж╛ржи рж╕рзЗржЯрж╛ржЗ ржЖржорж╛ржжрзЗрж░ рж╕рж╛ржерзЗ ржирж┐ржЪрзЗрж░ ржлрж░рзНржорзЗ рж▓рж┐ржЦрзЗ рж╢рзЗрзЯрж╛рж░ ржХрж░рзБржиред(ржПржЗ ржирзЛржЯрж┐рж╢ржЯрж┐ рзнржжрж┐ржи ржерж╛ржХржмрзЗ) ржзржирзНржпржмрж╛ржж ", 
buttons:[ { type:"web_url", 
url:"https://docs.google.com/forms/d/e/1FAIpQLSf5G29uR44XFvC03L2XYOTdtoj7qZnXupX2Tgf4GvDQZuiCDQ/viewform?usp=sf_link", 
title:"ржорждрж╛ржоржд ржжрж┐ржи", 
webview_height_ratio: "full" } ]
 }
 }
 }
};
callSendAPI(messageData);
}

//typing
function typing(recipientId) {
  var messageData = {
   recipient:{
    id:recipientId 
  },
  "sender_action":"typing_on"
}
callSendAPI(messageData);
}

//Message broadcast 
function callSendAPIBroadcast(messageBCID) {
  var messageBC = {
     message_creative_id: messageBCID,
     notification_type: 'REGULAR',
     messaging_type:'MESSAGE_TAG',
     tag: 'NON_PROMOTIONAL_SUBSCRIPTION'
  };
  
  
  request({
     uri: 'https://graph.facebook.com/v2.11/me/broadcast_messages',
     qs: { access_token: process.env.PAGE_ACCESS_TOKEN },
     method: 'POST',
     json: messageBC
     
   },  function (error, response, body) {
    if (!error && response.statusCode == 200) {
      var recipientId = body.recipient_id;
      var messageId = body.broadcast_id;

      console.log("Successfully send broadcast message with id %s to recipient %s", 
        messageId, recipientId);
    } else {
      console.error("Unable to send message.");
      console.error(response);
      console.error(error);
    }
  });  
  
  
}
//make creative id
function creativeBroadcastMessage(messageData) {
   request({
     uri: 'https://graph.facebook.com/v2.11/me/message_creatives',
     qs: { access_token: process.env.PAGE_ACCESS_TOKEN },
     method: 'POST',
     json: messageData
     
   },  function (error, response, body) {    
    if (!error && response.statusCode == 200) {
      var recipientId = body.recipient_id;
      var messageId = body.message_creative_id;

      console.log("Successfully create broadcast message with id %s to recipient %s", 
        messageId, recipientId);
      callSendAPIBroadcast(messageId);
    } else {
      console.error("Unable to send message.");
      console.error(response);
      console.error(error);
    }
  });
}

//Broadcast Template 
function broadcastMessage () {
 var messageData= {
  messages: [
    {
    attachment: {
      type: 'template',
      payload: {
        template_type: 'generic',
        elements: [
          {
            title: 'рж╢рзБржн ржиржмржмрж░рзНрж╖рзЗрж░ рж╢рзБржнрзЗржЪрзНржЫрж╛ ',
            image_url: 'https://cdn.glitch.com/d3e2a241-36ab-414f-9781-4e47668ac65e%2Freceived_446615672774327.png',
            subtitle: 'Bd-Translator ржмржЯржЯрж┐ рж╢рзЗрзЯрж╛рж░ ржХрж░рзБржи ржЖржкржирж╛рж░ ржмржирзНржзрзБрж░ рж╕рж╛ржерзЗ',
            buttons: [
              {
                type: 'web_url',
                url: 'https://www.facebook.com/bd.translate ',
                title: 'Visit Page'
              }
            ]
          }
        ]
      }
    }
    }
  ]
}; 
  creativeBroadcastMessage(messageData);
}

function broadcastButton () {
var messageData= {
  messages: [
    {
    attachment: {
      type: 'template',
      payload: {
        template_type: 'button',
       // text:'Bd-Translator ржмржЯрзЗрж░ ржЬржирзНржп ржПржХржЯрж┐ website ржбрж┐ржЬрж╛ржЗржи ржХрж░рж╛ рж╣рзЯрзЗржЫрзЗ ржЖрж╢рж╛ ржХрж░рж┐ ржЖржкржирж╛ржжрзЗрж░ ржнрж╛рж▓ рж▓рж╛ржЧржмрзЗ ржнрж┐ржЬрж┐ржЯ ржХрж░рждрзЗ ржирж┐ржЪрзЗрж░ ржмрж╛ржЯржирзЗ ржХрзНрж▓рж┐ржХ ржХрж░рзБржиред ',
          text:'ЁЯФ╗IMPORTANT NOTICE ЁЯФ╗:рж╣рзЯрждржмрж╛ BD-translator ржЖржкржирж╛ржжрзЗрж░ ржЖржЧрзЗрж░ ржоржд ржПржЗржнрж╛ржмрзЗ ржорзЗрж╕рзЗржЬ ржмрзНрж░ржбржХрж╛рж╕рзНржЯ ржХрж░рзЗ ржирзЛржЯрж┐рж╢ ржжрж┐рждрзЗ ржкрж╛рж░ржмрзЗ ржирж╛ЁЯШЮ(рждржмрзЗ ржмржЯрзЗрж░ ржХрж╛рж░рзНржпржХрзНрж░ржо ржЖржЧрзЗрж░ ржорждржЗ рж╕ржЪрж▓ ржерж╛ржХржмрзЗ)ржХрж╛рж░ржи ржлрзЗрж╕ржмрзБржХ  ржорзЗрж╕рзЗржЬ ржмрзНрж░ржбржХрж╛рж╕рзНржЯ ржЕржкрж╢ржиржЯрж┐ ржЖржЧрж╛ржорж┐ржХрж╛рж▓ ржерзЗржХрзЗ ржмржирзНржз ржХрж░рзЗ ржжрж┐ржмрзЗ рждрж╛ржЗ ржЖржкржирж╛ржжрзЗрж░ ржмрж┐ржирзАржд ржнрж╛ржмрзЗ ржЕржирзБрж░ржз ржХрж░ржЫрж┐ ржЖржкржирж╛рж░рж╛ ржЖржорж╛ржжрзЗрж░ ржирждрзБржи ржмржЯ Noticebd24  ржП ржорзЗрж╕рзЗржЬ ржХрж░рзЗ ржпрзЛржЧ ржжрж┐ржи ред ржЖржорж╛ржжрзЗрж░ ржПржЗ ржирждрзБржи ржмржЯрзЗрж░ рж╕рж╛рж╣рж╛ржпрзНржпрзЗ ржЖржкржирж╛рж░рж╛ рж╕рзНржХрзБрж▓ ржХрж▓рзЗржЬ ржПржмржВ ржмрж┐рж╢рзНржмржмрж┐ржжрзНржпрж╛рж▓ржпрж╝ рж╕ржорзНржкрж░рзНржХрж┐ржд рж╕ржХрж▓  ржкрзНрж░ржпрж╝рзЛржЬржирзАрзЯ ржирзЛржЯрж┐рж╢ рж╕рж╣ рж╕ржХрж▓ ржкрзНрж░рзЯрзЛржЬржирзАрзЯ ржмржЗ ржбрж╛ржЙржирж▓рзЛржб рж╕рж╣ ржкрзНрж░рждрж┐ рж╕ржкрзНрждрж╛рж╣рзЗрж░ ржЪрж╛ржХрж░рж┐рж░ ржЦржмрж░ рж╕рж╣ ржмрж┐ржнрж┐ржирзНржи ржЕржлрж╛рж░рзЗрж░ ржирзЛржЯрж┐рж╢ ржжрзЗржУрзЯрж╛ рж╣рзЯред ржПржмржВ BD-Translator  ржмржЯрзЗрж░ ржмрж┐ржнрж┐ржирзНржи ржкрзНрж░ржпрж╝рзЛржЬржирзАрзЯ ржирзЛржЯрж┐рж╢ ржЧрзБрж▓рзЛржУ ржЖржорж░рж╛ ржЖржорж╛ржжрзЗрж░ ржПржЗ Noticebd24 ржмржЯрзЗрж░ рж╕рж╛рж╣рж╛ржпрзНржпрзЗ ржжрзЗржм ред ржзржирзНржпржмрж╛ржж рж╕ржХрж▓ржХрзЗ , ржирж┐ржЪрзЗрж░ ржмрж╛ржЯржи ржерзЗржХрзЗ ржирждрзБржи ржмржЯрзЗ ржорзЗрж╕рзЗржЬ ржХрж░рзБржи ред  ',
       // text:'Bd-translator ржмрж╛рж╕рзАрж░рж╛ ржХрзЛржерж╛рзЯ? рж▓рж╛ржЧржмрзЗ ржирж╛ржХрж┐ ржлрзНрж░рзА рзи ржЬрж┐ржмрж┐ ржУрзЯрзЗржм рж╣рзЛрж╕рзНржЯрж┐ржВ?  рж▓рж╛ржЧрж▓рзЗ ржПржЦржиржЗ ржжрзЗржЦрзЗ ржлрзЗрж▓рзБржи ржПржЗ ржкрзЛрж╕рзНржЯржЯрж┐ ржЖрж░ рж╕ржорзЯ ржерж╛ржХрждрзЗ ржирж┐рзЯрзЗ ржирж┐ржи ржЖржкржирж╛рж░ ржУрзЯрзЗржмрж╕рж╛ржЗржЯ рждрзИрж░рж┐ ржХрж░рж╛рж░ ржЬржирзНржп рзи ржЬрж┐ржмрж┐ ржлрзНрж░рж┐ рж╣рзЛрж╕рзНржЯрж┐ржВ,,,  ржмрж╛ржЯржирзЗ ржХрзНрж▓рж┐ржХ ржХрж░рзЗ ржкрзЛрж╕рзНржЯржЯрж┐ ржжрзЗржЦрзЗ ржирж┐ржи',
      //  BD-Translator ржПрж░ рж╕ржм ржЖржкржбрзЗржЯ ржЬрж╛ржирждрзЗ ржПржмржВ ржЖржкржирж╛ржжрзЗрж░ рж╕ржорж╕рзНржпрж╛ ржЧрзБрж▓рзЛ ржЬрж╛ржирж╛рждрзЗ  ржкрзЗржЬрзЗ рж▓рж╛ржЗржХ ржжрж┐ржпрж╝рзЗ рж░рж╛ржЦрзБржи ржПржмржВ ржпрзЗржХрзЛржи ржкрзНрж░ржпрж╝рзЛржЬржирзЗ ржкрзЗржЗржЬрзЗ рж╕ржорж╕рзНржпрж╛ржЧрзБрж▓рзЛ ржЬрж╛ржирж╛ржи ред ржЕржирзБржЧрзНрж░рж╣ ржХрж░рзЗ ржкрзЗржЬрзЗ рж▓рж╛ржЗржХ ржжрж┐ржпрж╝рзЗ рж░рж╛ржЦрзБржиред ржзржирзНржпржмрж╛ржж', 
        buttons: [
              {
                type: 'web_url',
                url: 'http://m.me/noticebd24',
                title: 'Message Noticebd24'
              }
            ]
          }
      }
    }
  ]
};
creativeBroadcastMessage(messageData);
}
